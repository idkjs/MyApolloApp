// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Fragments from "./Fragments.bs.js";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";

var Raw = {};

var query = ((frag_0) => require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      ...TodoItem
    }
  }
  ${frag_0}
`)(Fragments.TodoItem.query);

function parse(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                return Fragments.TodoItem.verifyArgsAndParse("TodoItem", value);
              })
        };
}

function serialize(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        return Fragments.TodoItem.serialize(value);
      });
  return {
          todos: todos
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var TodosQuery_refetchQueryDescription = include.refetchQueryDescription;

var TodosQuery_useLazy = include.useLazy;

var TodosQuery_useLazyWithVariables = include.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

function Query_Fragments$TodoCount(Props) {
  var todos = Props.todos;
  return React.createElement(ReactNative.Text, {
              children: "There are " + (String(todos.length) + " To-Dos")
            });
}

var TodoCount = {
  make: Query_Fragments$TodoCount
};

function Query_Fragments(Props) {
  var queryResult = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match = queryResult.data;
  return React.createElement(ReactNative.View, {
              children: match !== undefined ? React.createElement(ReactNative.View, {
                      children: null
                    }, React.createElement("dialog", undefined, queryResult.loading ? React.createElement(ReactNative.Text, {
                                children: "Refreshing..."
                              }) : null, queryResult.error !== undefined ? React.createElement(ReactNative.Text, {
                                children: "Something went wrong, data may be incomplete"
                              }) : null), React.createElement(Query_Fragments$TodoCount, {
                          todos: match.todos
                        })) : (
                  queryResult.loading ? React.createElement(ReactNative.Text, {
                          children: "Loading"
                        }) : React.createElement(ReactNative.Text, {
                          children: "Error loading data"
                        })
                )
            });
}

var TodoItem;

var make = Query_Fragments;

export {
  TodoItem ,
  TodosQuery ,
  TodoCount ,
  make ,
  
}
/* query Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Utils from "../utils/Utils.bs.js";
import * as React from "react";
import * as Client from "../Client.bs.js";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
import * as NewAppScreen from "react-native/Libraries/NewAppScreen";
import * as ApolloClient__React_Hooks_UseMutation from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js";

var styles = ReactNative.StyleSheet.create({
      scrollView: {
        backgroundColor: NewAppScreen.Colors.lighter
      },
      engine: {
        position: "absolute",
        right: 0
      },
      body: {
        backgroundColor: NewAppScreen.Colors.white
      },
      sectionContainer: {
        marginTop: 32,
        paddingHorizontal: 24
      },
      sectionTitle: {
        color: NewAppScreen.Colors.black,
        fontSize: 24,
        fontWeight: "600"
      },
      sectionDescription: {
        color: NewAppScreen.Colors.dark,
        fontSize: 18,
        fontWeight: "400",
        marginTop: 8
      },
      highlight: {
        fontWeight: "700"
      },
      button: {
        borderRadius: 60,
        alignItems: "center",
        height: 120,
        justifyContent: "center",
        width: 120
      },
      footer: {
        color: NewAppScreen.Colors.dark,
        fontSize: 12,
        fontWeight: "600",
        textAlign: "right",
        padding: 4,
        paddingRight: 12
      }
    });

var Raw = {};

var query = (require("@apollo/client").gql`
  mutation AddTodo($text: String!)  {
    todo: addTodoSimple(text: $text)  {
      __typename
      id
      text
    }
  }
`);

function parse(value) {
  var value$1 = value.todo;
  return {
          todo: {
            __typename: value$1.__typename,
            id: value$1.id,
            text: value$1.text
          }
        };
}

function serialize(value) {
  var value$1 = value.todo;
  var value$2 = value$1.text;
  var value$3 = value$1.id;
  var value$4 = value$1.__typename;
  var todo = {
    __typename: value$4,
    id: value$3,
    text: value$2
  };
  return {
          todo: todo
        };
}

function serializeVariables(inp) {
  return {
          text: inp.text
        };
}

function makeVariables(text, param) {
  return {
          text: text
        };
}

var AddTodoMutation_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var AddTodoMutation_use = include.use;

var AddTodoMutation_useWithVariables = include.useWithVariables;

var AddTodoMutation = {
  AddTodoMutation_inner: AddTodoMutation_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  use: AddTodoMutation_use,
  useWithVariables: AddTodoMutation_useWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      text
      completed
    }
  }
`);

function parse$1(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        text: value.text,
                        completed: !(value$1 == null) ? value$1 : undefined
                      };
              })
        };
}

function serialize$1(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.completed;
        var completed = value$1 !== undefined ? value$1 : null;
        var value$2 = value.text;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                text: value$2,
                completed: completed
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var TodosQuery_refetchQueryDescription = include$1.refetchQueryDescription;

var TodosQuery_use = include$1.use;

var TodosQuery_useLazy = include$1.useLazy;

var TodosQuery_useLazyWithVariables = include$1.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: TodosQuery_use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

function logTodos(param) {
  return Utils.$$Promise.ignore(Utils.$$Promise.then_(Curry._6(Client.instance.reason_query, {
                      query: query$1,
                      Raw: Raw$1,
                      parse: parse$1,
                      serialize: serialize$1,
                      serializeVariables: serializeVariables$1
                    }, undefined, undefined, undefined, undefined, undefined), (function (result) {
                    var tmp;
                    if (result.TAG) {
                      console.log("Error: ", result._0);
                      tmp = undefined;
                    } else {
                      console.log("query To-Dos: ", result._0.data.todos);
                      tmp = undefined;
                    }
                    return Promise.resolve(tmp);
                  })));
}

function addTodo(param) {
  return Utils.$$Promise.ignore(Utils.$$Promise.then_(Curry.app(Client.instance.reason_mutate, [
                      {
                        query: query,
                        Raw: Raw,
                        parse: parse,
                        serialize: serialize,
                        serializeVariables: serializeVariables
                      },
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      {
                        text: "Another To-Do"
                      }
                    ]), (function (result) {
                    var tmp;
                    if (result.TAG) {
                      console.log("Error: ", result._0);
                      tmp = undefined;
                    } else {
                      console.log("mutate result: ", result._0.data);
                      tmp = undefined;
                    }
                    return Promise.resolve(tmp);
                  })));
}

var observableQuery = Curry._6(Client.instance.reason_watchQuery, {
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    }, undefined, undefined, undefined, undefined, undefined);

var watchQuerySubscription = Curry._4(observableQuery.reason_subscribe, (function (result) {
        var match = result.data;
        if (match !== undefined) {
          console.log("watchQuery To-Dos: ", match.todos);
          return ;
        }
        
      }), undefined, undefined, undefined);

function ClientBasics(Props) {
  return React.createElement(ReactNative.View, {
              style: styles.sectionContainer,
              children: null
            }, React.createElement(ReactNative.TouchableOpacity, {
                  style: styles.button,
                  onPress: logTodos,
                  children: React.createElement(ReactNative.Text, {
                        style: styles.sectionDescription,
                        children: "Log To-Dos (Reason Promise)"
                      })
                }), React.createElement(ReactNative.TouchableOpacity, {
                  style: styles.button,
                  onPress: addTodo,
                  children: React.createElement(ReactNative.Text, {
                        style: styles.sectionDescription,
                        children: "Add To-Do"
                      })
                }), React.createElement(ReactNative.Text, {
                  style: styles.sectionDescription,
                  children: "[ To-Dos also logged in console with watchQuery ]"
                }));
}

var ApolloQueryResult;

var ObservableQuery;

var make = ClientBasics;

export {
  styles ,
  ApolloQueryResult ,
  ObservableQuery ,
  AddTodoMutation ,
  TodosQuery ,
  logTodos ,
  addTodo ,
  observableQuery ,
  watchQuerySubscription ,
  make ,
  
}
/* styles Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Utils from "../utils/Utils.bs.js";
import * as Client from "../Client.bs.js";
import * as $$Promise from "reason-promise/src/js/promise.bs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ApolloClient__Errors_ApolloError from "reason-apollo-client/src/@apollo/client/errors/ApolloClient__Errors_ApolloError.bs.js";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
import * as ApolloClient__React_Hooks_UseMutation from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  mutation AddTodo($text: String!)  {
    todo: addTodoSimple(text: $text)  {
      __typename
      id
      text
    }
  }
`);

function parse(value) {
  var value$1 = value.todo;
  return {
          todo: {
            __typename: value$1.__typename,
            id: value$1.id,
            text: value$1.text
          }
        };
}

function serialize(value) {
  var value$1 = value.todo;
  var value$2 = value$1.text;
  var value$3 = value$1.id;
  var value$4 = value$1.__typename;
  var todo = {
    __typename: value$4,
    id: value$3,
    text: value$2
  };
  return {
          todo: todo
        };
}

function serializeVariables(inp) {
  return {
          text: inp.text
        };
}

function makeVariables(text, param) {
  return {
          text: text
        };
}

var DuplicateTodoMutation_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var DuplicateTodoMutation_use = include.use;

var DuplicateTodoMutation_useWithVariables = include.useWithVariables;

var DuplicateTodoMutation = {
  DuplicateTodoMutation_inner: DuplicateTodoMutation_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  use: DuplicateTodoMutation_use,
  useWithVariables: DuplicateTodoMutation_useWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      text
      completed
    }
  }
`);

function parse$1(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        text: value.text,
                        completed: !(value$1 == null) ? value$1 : undefined
                      };
              })
        };
}

function serialize$1(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.completed;
        var completed = value$1 !== undefined ? value$1 : null;
        var value$2 = value.text;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                text: value$2,
                completed: completed
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var TodosQuery_refetchQueryDescription = include$1.refetchQueryDescription;

var TodosQuery_use = include$1.use;

var TodosQuery_useLazy = include$1.useLazy;

var TodosQuery_useLazyWithVariables = include$1.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: TodosQuery_use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

Curry._6(Client.instance.reason_query, {
            query: query$1,
            Raw: Raw$1,
            parse: parse$1,
            serialize: serialize$1,
            serializeVariables: serializeVariables$1
          }, undefined, undefined, undefined, undefined, undefined).then(function (result) {
          var tmp;
          if (result.TAG) {
            tmp = result;
          } else {
            var firstTodo = Belt_Array.get(result._0.data.todos, 0);
            tmp = firstTodo !== undefined ? ({
                  TAG: /* Ok */0,
                  _0: firstTodo
                }) : ({
                  TAG: /* Error */1,
                  _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No To-Dos!", undefined, undefined)
                });
          }
          return Promise.resolve(tmp);
        }).then(function (result) {
        if (result.TAG) {
          return Promise.resolve(result);
        } else {
          return Curry.app(Client.instance.reason_mutate, [
                      {
                        query: query,
                        Raw: Raw,
                        parse: parse,
                        serialize: serialize,
                        serializeVariables: serializeVariables
                      },
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      {
                        text: result._0.text
                      }
                    ]);
        }
      }).then(function (result) {
      var tmp;
      if (result.TAG) {
        console.log("Something went wrong: ", result._0.message);
        tmp = undefined;
      } else {
        console.log("Duplicated first todo!");
        tmp = undefined;
      }
      return Promise.resolve(tmp);
    });

Utils.$$Promise.ignore(Utils.$$Promise.then_(Utils.$$Promise.then_(Utils.$$Promise.then_(Curry._6(Client.instance.reason_query, {
                      query: query$1,
                      Raw: Raw$1,
                      parse: parse$1,
                      serialize: serialize$1,
                      serializeVariables: serializeVariables$1
                    }, undefined, undefined, undefined, undefined, undefined), (function (result) {
                    var tmp;
                    if (result.TAG) {
                      tmp = result;
                    } else {
                      var firstTodo = Belt_Array.get(result._0.data.todos, 0);
                      tmp = firstTodo !== undefined ? ({
                            TAG: /* Ok */0,
                            _0: firstTodo
                          }) : ({
                            TAG: /* Error */1,
                            _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No To-Dos!", undefined, undefined)
                          });
                    }
                    return Promise.resolve(tmp);
                  })), (function (result) {
                if (result.TAG) {
                  return Promise.resolve(result);
                } else {
                  return Curry.app(Client.instance.reason_mutate, [
                              {
                                query: query,
                                Raw: Raw,
                                parse: parse,
                                serialize: serialize,
                                serializeVariables: serializeVariables
                              },
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              {
                                text: result._0.text
                              }
                            ]);
                }
              })), (function (result) {
            var tmp;
            if (result.TAG) {
              console.log("Something went wrong: ", result._0.message);
              tmp = undefined;
            } else {
              console.log("Duplicated first todo!");
              tmp = undefined;
            }
            return Promise.resolve(tmp);
          })));

$$Promise.get($$Promise.flatMapOk($$Promise.map(Curry._6(Client.instance.reason_query, {
                  query: query$1,
                  Raw: Raw$1,
                  parse: parse$1,
                  serialize: serialize$1,
                  serializeVariables: serializeVariables$1
                }, undefined, undefined, undefined, undefined, undefined), (function (result) {
                if (result.TAG) {
                  return result;
                }
                var firstTodo = Belt_Array.get(result._0.data.todos, 0);
                if (firstTodo !== undefined) {
                  return {
                          TAG: /* Ok */0,
                          _0: firstTodo
                        };
                } else {
                  return {
                          TAG: /* Error */1,
                          _0: ApolloClient__Errors_ApolloError.make(undefined, undefined, "No To-Dos!", undefined, undefined)
                        };
                }
              })), (function (firstTodo) {
            return Curry.app(Client.instance.reason_mutate, [
                        {
                          query: query,
                          Raw: Raw,
                          parse: parse,
                          serialize: serialize,
                          serializeVariables: serializeVariables
                        },
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        undefined,
                        {
                          text: firstTodo.text
                        }
                      ]);
          })), (function (result) {
        if (result.TAG) {
          console.log("Something went wrong: ", result._0.message);
          return ;
        }
        console.log("Duplicated first todo!");
        
      }));

var ApolloError;

var ApolloQueryResult;

var FetchResult;

var client = Client.instance;

export {
  ApolloError ,
  ApolloQueryResult ,
  FetchResult ,
  DuplicateTodoMutation ,
  TodosQuery ,
  client ,
  
}
/* query Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Utils from "../utils/Utils.bs.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      text
      completed
    }
  }
`);

function parse(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        text: value.text,
                        completed: !(value$1 == null) ? value$1 : undefined
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.completed;
        var completed = value$1 !== undefined ? value$1 : null;
        var value$2 = value.text;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                text: value$2,
                completed: completed
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var TodosQuery_refetchQueryDescription = include.refetchQueryDescription;

var TodosQuery_useLazy = include.useLazy;

var TodosQuery_useLazyWithVariables = include.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

function Query_Typical(Props) {
  var queryResult = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match = queryResult.data;
  var tmp;
  if (match !== undefined) {
    var fetchMore = queryResult.fetchMore;
    tmp = React.createElement(ReactNative.View, {
          children: null
        }, React.createElement("dialog", undefined, queryResult.loading ? React.createElement(ReactNative.Text, {
                    children: "Refreshing..."
                  }) : null, queryResult.error !== undefined ? React.createElement(ReactNative.Text, {
                    children: "Something went wrong, data may be incomplete"
                  }) : null), React.createElement(ReactNative.Text, {
              children: "There are " + (String(match.todos.length) + " To-Dos")
            }), React.createElement(ReactNative.View, {
              children: React.createElement(ReactNative.TouchableOpacity, {
                    onPress: (function (param) {
                        var __x = Curry._5(fetchMore, undefined, undefined, undefined, (function (previousData, param) {
                                var fetchMoreResult = param.fetchMoreResult;
                                if (fetchMoreResult !== undefined) {
                                  return {
                                          todos: Belt_Array.concat(previousData.todos, fetchMoreResult.todos)
                                        };
                                } else {
                                  return previousData;
                                }
                              }), undefined);
                        return Utils.$$Promise.ignore(__x.then(function (result) {
                                        if (result.TAG) {
                                          console.log("fetchMore: failure!");
                                        } else {
                                          console.log("fetchMore: success!");
                                        }
                                        return Promise.resolve(undefined);
                                      }));
                      }),
                    children: React.createElement(ReactNative.Text, {
                          children: "Fetch More!"
                        })
                  })
            }));
  } else {
    tmp = queryResult.loading ? React.createElement(ReactNative.Text, {
            children: "Loading"
          }) : React.createElement(ReactNative.Text, {
            children: "Error loading data"
          });
  }
  return React.createElement(ReactNative.View, {
              children: tmp
            });
}

var QueryResult;

var make = Query_Typical;

export {
  QueryResult ,
  TodosQuery ,
  make ,
  
}
/* query Not a pure module */

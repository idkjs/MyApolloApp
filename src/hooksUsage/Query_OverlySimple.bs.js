// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      text
      completed
    }
  }
`);

function parse(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        text: value.text,
                        completed: !(value$1 == null) ? value$1 : undefined
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.completed;
        var completed = value$1 !== undefined ? value$1 : null;
        var value$2 = value.text;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                text: value$2,
                completed: completed
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var TodosQuery_refetchQueryDescription = include.refetchQueryDescription;

var TodosQuery_useLazy = include.useLazy;

var TodosQuery_useLazyWithVariables = include.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

function Query_OverlySimple(Props) {
  var match = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var match$1 = match.data;
  if (match.loading) {
    return React.createElement(ReactNative.Text, {
                children: "Loading..."
              });
  } else if (match.error !== undefined) {
    return React.createElement(ReactNative.Text, {
                children: "Error loading data"
              });
  } else if (match$1 !== undefined) {
    return React.createElement(ReactNative.Text, {
                children: null
              }, "There are ", match$1.todos.length, " To-Dos");
  } else {
    return React.createElement(ReactNative.Text, {
                children: "I hope this is impossible, but sometimes it's not!"
              });
  }
}

var make = Query_OverlySimple;

export {
  TodosQuery ,
  make ,
  
}
/* query Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.js";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
import * as ApolloClient__React_Hooks_UseSubscription from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseSubscription.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      completed
      text
    }
  }
`);

function parse(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        completed: !(value$1 == null) ? value$1 : undefined,
                        text: value.text
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.text;
        var value$2 = value.completed;
        var completed = value$2 !== undefined ? value$2 : null;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                completed: completed,
                text: value$1
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var TodosQuery_refetchQueryDescription = include.refetchQueryDescription;

var TodosQuery_useLazy = include.useLazy;

var TodosQuery_useLazyWithVariables = include.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  subscription SorryItsNotASubscriptionForTodos  {
    siteStatisticsUpdated  {
      __typename
      currentVisitorsOnline
    }
  }
`);

function parse$1(value) {
  var value$1 = value.siteStatisticsUpdated;
  return {
          siteStatisticsUpdated: !(value$1 == null) ? ({
                __typename: value$1.__typename,
                currentVisitorsOnline: value$1.currentVisitorsOnline
              }) : undefined
        };
}

function serialize$1(value) {
  var value$1 = value.siteStatisticsUpdated;
  var siteStatisticsUpdated;
  if (value$1 !== undefined) {
    var value$2 = value$1.currentVisitorsOnline;
    var value$3 = value$1.__typename;
    siteStatisticsUpdated = {
      __typename: value$3,
      currentVisitorsOnline: value$2
    };
  } else {
    siteStatisticsUpdated = null;
  }
  return {
          siteStatisticsUpdated: siteStatisticsUpdated
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables$1(param) {
  
}

var SorryItsNotASubscriptionForTodos_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1
};

var include$1 = ApolloClient__React_Hooks_UseSubscription.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var SorryItsNotASubscriptionForTodos_use = include$1.use;

var SorryItsNotASubscriptionForTodos = {
  SorryItsNotASubscriptionForTodos_inner: SorryItsNotASubscriptionForTodos_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables$1,
  use: SorryItsNotASubscriptionForTodos_use
};

function Query_SubscribeToMore(Props) {
  var queryResult = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  React.useEffect((function () {
          Curry._5(queryResult.subscribeToMore, {
                query: query$1,
                Raw: Raw$1,
                parse: parse$1,
                serialize: serialize$1,
                serializeVariables: serializeVariables$1
              }, (function (previous, param) {
                  var count = String(Belt_Option.getWithDefault(Belt_Option.map(param.subscriptionData.data.siteStatisticsUpdated, (function (stats) {
                                  return stats.currentVisitorsOnline;
                                })), 0));
                  return {
                          todos: Belt_Array.concat(previous.todos, [{
                                  __typename: "TodoItem",
                                  id: "subscribeToMoreTodo",
                                  completed: undefined,
                                  text: "Hello, " + (count + " vistors online")
                                }])
                        };
                }), undefined, undefined, undefined);
          
        }), []);
  var match = queryResult.data;
  return React.createElement(ReactNative.View, {
              children: null
            }, React.createElement(ReactNative.Text, {
                  children: "[ Not functional, but the examples are still valid ]"
                }), match !== undefined ? React.createElement(ReactNative.Text, {
                    children: "There are " + (String(match.todos.length) + " To-Dos")
                  }) : null);
}

var QueryResult;

var make = Query_SubscribeToMore;

export {
  QueryResult ,
  TodosQuery ,
  SorryItsNotASubscriptionForTodos ,
  make ,
  
}
/* query Not a pure module */

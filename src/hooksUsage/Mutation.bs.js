// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Fragments from "../fragmentsUsage/Fragments.bs.js";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";
import * as ApolloClient__React_Hooks_UseMutation from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseMutation.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  mutation AddTodo($text: String!)  {
    todo: addTodoSimple(text: $text)  {
      __typename
      id
      completed
      text
    }
  }
`);

function parse(value) {
  var value$1 = value.todo;
  var value$2 = value$1.completed;
  return {
          todo: {
            __typename: value$1.__typename,
            id: value$1.id,
            completed: !(value$2 == null) ? value$2 : undefined,
            text: value$1.text
          }
        };
}

function serialize(value) {
  var value$1 = value.todo;
  var value$2 = value$1.text;
  var value$3 = value$1.completed;
  var completed = value$3 !== undefined ? value$3 : null;
  var value$4 = value$1.id;
  var value$5 = value$1.__typename;
  var todo = {
    __typename: value$5,
    id: value$4,
    completed: completed,
    text: value$2
  };
  return {
          todo: todo
        };
}

function serializeVariables(inp) {
  return {
          text: inp.text
        };
}

function makeVariables(text, param) {
  return {
          text: text
        };
}

var AddTodoMutation_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables
};

var include = ApolloClient__React_Hooks_UseMutation.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var use = include.use;

var AddTodoMutation_useWithVariables = include.useWithVariables;

var AddTodoMutation = {
  AddTodoMutation_inner: AddTodoMutation_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  use: use,
  useWithVariables: AddTodoMutation_useWithVariables
};

var Raw$1 = {};

var query$1 = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      completed
      text
    }
  }
`);

function parse$1(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        completed: !(value$1 == null) ? value$1 : undefined,
                        text: value.text
                      };
              })
        };
}

function serialize$1(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.text;
        var value$2 = value.completed;
        var completed = value$2 !== undefined ? value$2 : null;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                completed: completed,
                text: value$1
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables$1(param) {
  
}

function makeVariables$1(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables
};

var include$1 = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query$1,
      Raw: Raw$1,
      parse: parse$1,
      serialize: serialize$1,
      serializeVariables: serializeVariables$1
    });

var refetchQueryDescription = include$1.refetchQueryDescription;

var TodosQuery_use = include$1.use;

var TodosQuery_useLazy = include$1.useLazy;

var TodosQuery_useLazyWithVariables = include$1.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw$1,
  query: query$1,
  parse: parse$1,
  serialize: serialize$1,
  serializeVariables: serializeVariables$1,
  makeVariables: makeVariables$1,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: refetchQueryDescription,
  use: TodosQuery_use,
  useLazy: TodosQuery_useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

function Mutation(Props) {
  var match = Curry.app(use, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var result = match[1];
  var match$1 = result.data;
  var mutate = match[0];
  if (!result.called) {
    return React.createElement(ReactNative.View, {
                children: null
              }, React.createElement(ReactNative.Text, {
                    children: "Not called... "
                  }), React.createElement(ReactNative.TouchableOpacity, {
                    onPress: (function (param) {
                        Curry._8(mutate, undefined, undefined, undefined, undefined, undefined, undefined, undefined, {
                              text: "Another To-Do"
                            });
                        
                      }),
                    children: React.createElement(ReactNative.Text, {
                          children: "Add To-Do"
                        })
                  }), React.createElement(ReactNative.Text, {
                    children: " "
                  }), React.createElement(ReactNative.TouchableOpacity, {
                    onPress: (function (param) {
                        Curry._8(mutate, undefined, undefined, undefined, undefined, (function (_variables) {
                                return {
                                        todo: {
                                          __typename: "TodoItem",
                                          id: "optimisticResponseTodo",
                                          completed: undefined,
                                          text: "To-Do from optimisticRespomse"
                                        }
                                      };
                              }), [
                              Curry._3(refetchQueryDescription, undefined, undefined, undefined),
                              {
                                TAG: /* String */1,
                                _0: "TodosQuery"
                              }
                            ], (function (param, param$1) {
                                var data = param$1.data;
                                if (data === undefined) {
                                  return ;
                                }
                                var todo = data.todo;
                                console.log("mutate.update To-Do: ", todo);
                                Curry._3(param.reason_writeFragment, {
                                      query: Fragments.TodoItem.query,
                                      Raw: Fragments.TodoItem.Raw,
                                      parse: Fragments.TodoItem.parse,
                                      serialize: Fragments.TodoItem.serialize
                                    }, {
                                      __typename: todo.__typename,
                                      id: "fragmentToDo",
                                      text: "To-Do from writeFragment",
                                      completed: undefined
                                    }, undefined);
                                Curry._6(param.reason_writeQuery, {
                                      query: query$1,
                                      Raw: Raw$1,
                                      parse: parse$1,
                                      serialize: serialize$1,
                                      serializeVariables: serializeVariables$1
                                    }, undefined, {
                                      todos: [{
                                          __typename: todo.__typename,
                                          id: "writeQueryToDo",
                                          completed: undefined,
                                          text: "To-Do from writeQuery"
                                        }]
                                    }, undefined, undefined, undefined);
                                
                              }), {
                              text: "Another To-Do"
                            });
                        
                      }),
                    children: React.createElement(ReactNative.Text, {
                          children: "Add To-Do (all the bells and whistles)"
                        })
                  }));
  }
  if (result.loading) {
    return React.createElement(ReactNative.Text, {
                children: "Loading..."
              });
  }
  if (match$1 !== undefined && result.error === undefined) {
    return React.createElement(ReactNative.Text, {
                children: "To-Do added: \"" + (match$1.todo.text + "\"")
              });
  }
  var error = result.error;
  return React.createElement(ReactNative.View, {
              children: React.createElement(ReactNative.View, {
                    children: null
                  }, React.createElement(ReactNative.Text, {
                        children: "Error loading data"
                      }), error !== undefined ? React.createElement(ReactNative.Text, {
                          children: ": " + error.message
                        }) : null)
            });
}

var Cache;

var make = Mutation;

export {
  Cache ,
  AddTodoMutation ,
  TodosQuery ,
  make ,
  
}
/* query Not a pure module */

// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as ReactNative from "react-native";
import * as ApolloClient__React_Hooks_UseQuery from "reason-apollo-client/src/@apollo/client/react/hooks/ApolloClient__React_Hooks_UseQuery.bs.js";

var Raw = {};

var query = (require("@apollo/client").gql`
  query TodosQuery  {
    todos: allTodos  {
      __typename
      id
      text
      completed
    }
  }
`);

function parse(value) {
  var value$1 = value.todos;
  return {
          todos: value$1.map(function (value) {
                var value$1 = value.completed;
                return {
                        __typename: value.__typename,
                        id: value.id,
                        text: value.text,
                        completed: !(value$1 == null) ? value$1 : undefined
                      };
              })
        };
}

function serialize(value) {
  var value$1 = value.todos;
  var todos = value$1.map(function (value) {
        var value$1 = value.completed;
        var completed = value$1 !== undefined ? value$1 : null;
        var value$2 = value.text;
        var value$3 = value.id;
        var value$4 = value.__typename;
        return {
                __typename: value$4,
                id: value$3,
                text: value$2,
                completed: completed
              };
      });
  return {
          todos: todos
        };
}

function serializeVariables(param) {
  
}

function makeVariables(param) {
  
}

function makeDefaultVariables(param) {
  
}

var TodosQuery_inner = {
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables
};

var include = ApolloClient__React_Hooks_UseQuery.Extend({
      query: query,
      Raw: Raw,
      parse: parse,
      serialize: serialize,
      serializeVariables: serializeVariables
    });

var useLazy = include.useLazy;

var TodosQuery_refetchQueryDescription = include.refetchQueryDescription;

var TodosQuery_use = include.use;

var TodosQuery_useLazyWithVariables = include.useLazyWithVariables;

var TodosQuery = {
  TodosQuery_inner: TodosQuery_inner,
  Raw: Raw,
  query: query,
  parse: parse,
  serialize: serialize,
  serializeVariables: serializeVariables,
  makeVariables: makeVariables,
  makeDefaultVariables: makeDefaultVariables,
  refetchQueryDescription: TodosQuery_refetchQueryDescription,
  use: TodosQuery_use,
  useLazy: useLazy,
  useLazyWithVariables: TodosQuery_useLazyWithVariables
};

function Query_Lazy(Props) {
  var match = Curry.app(useLazy, [
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined,
        undefined
      ]);
  var queryResult = match[1];
  var executeQuery = match[0];
  var tmp;
  if (queryResult.TAG) {
    tmp = React.createElement(ReactNative.View, {
          children: null
        }, React.createElement(ReactNative.Text, {
              children: "Waiting to be executed... "
            }), React.createElement(ReactNative.TouchableOpacity, {
              onPress: (function (param) {
                  return Curry._3(executeQuery, undefined, undefined, undefined);
                }),
              children: React.createElement(ReactNative.Text, {
                    children: "Execute"
                  })
            }));
  } else {
    var match$1 = queryResult._0;
    var match$2 = match$1.data;
    tmp = match$2 !== undefined ? React.createElement(ReactNative.View, {
            children: null
          }, React.createElement("dialog", undefined, match$1.loading ? React.createElement(ReactNative.Text, {
                      children: "Refreshing..."
                    }) : null, match$1.error !== undefined ? React.createElement(ReactNative.Text, {
                      children: "Something went wrong, data may be incomplete"
                    }) : null), React.createElement(ReactNative.Text, {
                children: "There are " + (String(match$2.todos.length) + " To-Dos")
              })) : (
        match$1.loading ? React.createElement(ReactNative.Text, {
                children: "Loading"
              }) : React.createElement(ReactNative.Text, {
                children: "Error loading data"
              })
      );
  }
  return React.createElement(ReactNative.View, {
              children: tmp
            });
}

var make = Query_Lazy;

export {
  TodosQuery ,
  make ,
  
}
/* query Not a pure module */
